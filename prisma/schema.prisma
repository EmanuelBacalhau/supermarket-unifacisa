generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//  * Falta criar os controller e services das tabelas: (Cart(não presico criar, pois um usuário não pode deletar seu carrinho, por ser unico), Order(criar), OrdersHasProducts(criar - analisar))
//  *  Cart = não presico criar, pois um usuário não pode deletar seu carrinho, por ser unico
//  *  Order = criar
//  *  OrdersHasProducts = criar - analisar

model Employee {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  birthday  DateTime
  cpf       String   @unique
  email     String   @unique
  password  String
  role      String   @default("EMPLOYEE")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("employees")
}

model Client {
  id       String   @id @default(cuid()) @map("_id")
  name     String
  birthday DateTime
  cpf      String   @unique
  email    String   @unique
  password String
  role     String?  @default("CLIENT")

  cart       Cart?
  promotions PromotionClient[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("clients")
}

model Category {
  id        String   @id @default(cuid()) @map("_id")
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @default(now()) @updatedAt @map("updated_at")

  products Product[]

  @@map("categories")
}

model Product {
  id                String   @id @default(cuid()) @map("_id")
  imageUrl          String
  name              String
  price             Float
  description       String
  amount            Int
  categoryId        String   @map("category_id")
  barCode           String   @unique @map("bar_code")
  manufacturingDate DateTime @map("manufacturing_date")
  expirationDate    DateTime @map("expirion_date")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  ordersHasProducts OrdersHasProducts[]
  promotions        PromotionClient[]

  category Category @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Cart {
  id         String @id @default(cuid()) @map("_id")
  valueTotal Float  @default(0.0) @map("value_total")
  clientId   String @unique @map("client_id")

  order Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  client Client @relation(fields: [clientId], references: [id])

  @@map("carts")
}

model Order {
  id        String              @id @default(cuid()) @map("_id")
  cartId    String              @map("cart_id")
  finalized Boolean             @default(false)
  products  OrdersHasProducts[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  cart Cart @relation(fields: [cartId], references: [id])

  @@map("orders")
}

model OrdersHasProducts {
  id        String @id @default(cuid()) @map("_id")
  amount    Int    @default(1)
  orderId   String @map("order_id")
  productId String @map("product_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])

  @@map("orders_has_prodcuts")
}

model Promotion {
  id         String   @id @default(cuid()) @map("_id")
  name       String?
  percentage Int
  startDate  DateTime
  endDate    DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  promotionsClient PromotionClient[]

  @@map("promotions")
}

model PromotionClient {
  id          String @id @default(cuid()) @map("_id")
  promotionId String @map("promotion_id")
  productId   String @map("product_id")
  clientId    String @map("client_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  client    Client    @relation(fields: [clientId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
  promotion Promotion @relation(fields: [promotionId], references: [id])

  @@map("promotions_to_clients")
}
